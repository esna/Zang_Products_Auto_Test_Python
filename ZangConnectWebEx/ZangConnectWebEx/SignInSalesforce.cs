///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ZangConnectWebEx
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SignInSalesforce recording.
    /// </summary>
    [TestModule("df38ead6-5417-47b6-8847-7a292dcf4093", ModuleType.Recording, 1)]
    public partial class SignInSalesforce : ITestModule
    {
        /// <summary>
        /// Holds an instance of the ZangConnectWebExRepository repository.
        /// </summary>
        public static ZangConnectWebExRepository repo = ZangConnectWebExRepository.Instance;

        static SignInSalesforce instance = new SignInSalesforce();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SignInSalesforce()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SignInSalesforce Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "7.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "7.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ZangConnect' at 931;306.", repo.ZangConnect.SelfInfo, new RecordItemIndex(0));
            repo.ZangConnect.Self.Click("931;306");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'LoginSalesforce.Username' at 109;29.", repo.LoginSalesforce.UsernameInfo, new RecordItemIndex(1));
            repo.LoginSalesforce.Username.Click("109;29");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'arnoe@esna.com{Tab}EsnaAvaya09' with focus on 'LoginSalesforce.Username'.", repo.LoginSalesforce.UsernameInfo, new RecordItemIndex(2));
            repo.LoginSalesforce.Username.PressKeys("arnoe@esna.com{Tab}EsnaAvaya09");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(3));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AllowAccessSalesforce.Oaapprove' at 111;11.", repo.AllowAccessSalesforce.OaapproveInfo, new RecordItemIndex(4));
            repo.AllowAccessSalesforce.Oaapprove.Click("111;11");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(5));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=653,Y=128,Width=636,Height=410}) on item 'ZangConnect.ZangConnect'.", repo.ZangConnect.ZangConnectInfo, new RecordItemIndex(6));
            Validate.ContainsImage(repo.ZangConnect.ZangConnectInfo, ZangConnect_Screenshot1, ZangConnect_Screenshot1_Options);
            Delay.Milliseconds(100);
            
        }

#region Image Feature Data
        CompressedImage ZangConnect_Screenshot1
        { get { return repo.ZangConnect.ZangConnectInfo.GetScreenshot1(new Rectangle(653, 128, 636, 410)); } }

        Imaging.FindOptions ZangConnect_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
